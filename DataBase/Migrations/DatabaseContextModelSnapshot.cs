// <auto-generated />
using System;
using DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataBase.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataBase.Models.PaymentDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PayDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserFromId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserToId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("Payments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PaymentDto");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DataBase.Models.UserDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BankName")
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataBase.Models.WhoAmIQuestionDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("PlayDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PlayerFromId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlayerToId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PlayerFromId");

                    b.HasIndex("PlayerToId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DataBase.Models.DebtDto", b =>
                {
                    b.HasBaseType("DataBase.Models.PaymentDto");

                    b.Property<bool>("Payed")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("DebtDto");
                });

            modelBuilder.Entity("DataBase.Models.PaymentDto", b =>
                {
                    b.HasOne("DataBase.Models.UserDto", "UserFrom")
                        .WithMany()
                        .HasForeignKey("UserFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.UserDto", "UserTo")
                        .WithMany()
                        .HasForeignKey("UserToId");

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("DataBase.Models.WhoAmIQuestionDto", b =>
                {
                    b.HasOne("DataBase.Models.UserDto", "PlayerFrom")
                        .WithMany()
                        .HasForeignKey("PlayerFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.UserDto", "PlayerTo")
                        .WithMany()
                        .HasForeignKey("PlayerToId");

                    b.Navigation("PlayerFrom");

                    b.Navigation("PlayerTo");
                });
#pragma warning restore 612, 618
        }
    }
}
